[{"path":"index.html","id":"pftc-teaching-material","chapter":"PFTC Teaching material","heading":"PFTC Teaching material","text":"book provides teaching material Plant Functional Trait Courses (PFTC).PFTC courses international course hands-training trait-based ecology.\nprovide teaching material data collection, curation, analysis, documentation, storage, reuse.\naddition, show reproducible transparent workflows make research open available.\ncover topics within fields plant functional trait ecology, ecosystem ecology, plant physiology remote sensing.","code":""},{"path":"pftc-6-course-information.html","id":"pftc-6-course-information","chapter":"1 PFTC 6 Course information","heading":"1 PFTC 6 Course information","text":"","code":""},{"path":"pftc-6-course-information.html","id":"logistics","chapter":"1 PFTC 6 Course information","heading":"1.1 Logistics","text":"PFTC6 course run 23. July - 5. August 2022 held Aurland, western Norway.\nlocation near Bergen course team assembling traveling Aurland.\nTransport Bergen Aurland (bus car) can organized course leaders.\narrive via Oslo elsewhere, transport Aurland (train bus) needs organized .\nflights Bergen scheduled arrive latest 22nd July depart earliest 6th August Bergen (travel needs arrive Aurland 23rd latest, depart 5th latest).","code":""},{"path":"the-pftc6-study-system.html","id":"the-pftc6-study-system","chapter":"2 The PFTC6 study system","heading":"2 The PFTC6 study system","text":"","code":""},{"path":"the-pftc6-study-system.html","id":"alpine-ecosystems-in-western-norway","chapter":"2 The PFTC6 study system","heading":"2.1 Alpine ecosystems in Western Norway","text":"PFTC6 held Aurland fjords Western Norway.\nFigure 2.1: Map study area sites Aurland, Norway.\n\nFigure 2.2: fjords Aurland Western Norway.\nTypical alpine grasslands area look like :\nFigure 2.3: typical alpine grasslands one lower elevation.\n","code":""},{"path":"the-pftc6-study-system.html","id":"three-d-project---global-change-impacts-on-biodiversity-and-ecosystem-carbon-fluxes","chapter":"2 The PFTC6 study system","heading":"2.2 Three-D project - Global change impacts on biodiversity and ecosystem carbon fluxes","text":"complete description experiment see .","code":""},{"path":"the-pftc6-study-system.html","id":"study-sites","chapter":"2 The PFTC6 study system","heading":"2.2.1 Study sites","text":"study conducted three semi-natural grassland sites western Norway.\nsites location calcareous soil (loamy sand).\nsites chosen fit within elevational gradient three temperature levels differ c. 400 m elevation, temperature difference approximately 3°C summer temperature.\nsites correspond boreal, sub-alpine alpine biogeographic zones.\nfactors history, bedrock, vegetation type structure, slope exposure kept constant possible among selected sites within country. sites grazed sheep goats.\nFigure 2.4: ) experiment set along elevational gradient represents productivity gradient. experimental treatments warming (brown), grdient nitrogen addition (grey green) combination. treatments crossed four grazing treatment: control (clipping), intermediate intensive clipping, natural grazing outside grazing exclosure. B) Example plot divided non destructive (inner square) destructive sampling area (outer square).\nlowest site Vikesland locate 469 m .s.l. (60.9°N, 7.2°E).\nlocated near farm, 200 goats. summer, goats moving mountains day, graze higher elevation milked farm valley.\nvegetation dominated Agrostis capillaris, Anthoxantum odoratum, Achillea millefolium, Ranunculus acris, Rumex acetosa.\nFigure 2.5: lowest site farm Vikesland.\nmiddle site Joasete summer farm located 920 m .s.l.\narea around summer farm mostly grazed sheep sometimes goats.\nvegetation Joasete well adapted grazing pressure nutrient input animals.\ndominant plant species Agrostis capillaris, Deschampsia cespitosa, Achillea millefolium, Ranunculus acris, Ranunculus repens, Rumex acetosa.\nFigure 2.6: middle site summer farm Joasete\nhighest site Liahovden located 1290 m .s.l.\ngrazing moderately sheep, deer reindeer.\nvegetation species rich grassland, typical nutrient soils Norwegian alpine vegetation Achillea millefolium, Antennaria dioica, Bistorta vivipara, Leontodon autumnalis, Silene acaulis, Thalictrum alpinum.\nFigure 2.7: higsest site Liahovden.\n","code":""},{"path":"the-pftc6-study-system.html","id":"experimental-treatments","chapter":"2 The PFTC6 study system","heading":"2.2.2 Experimental treatments","text":"site, ten blocks, 8 plots marked corner. Six plots chosen relatively close (inside fence) two plots chosen away (outside fence).\nplot given unique originPlotID starting upper left corner block 1 highest site. numbering continued 160. transplanting, turf also received unique destinationPlotID (number 1-200; see ).\nplot received combination treatment randomly (warming, nitrogen addition grazing, see ). randomization treatments done two steps. First, 10 nitrogen levels assigned randomly per block (.e. block 1 received nitrogen level site). chose randomize nitrogen treatment block level avoid nitrogen contamination plots within blocks.\nSecond, warming grazing treatments randomized within block. six plots within block (inside fence) randomly assigned warming grazing treatment. two plots per block located outside fence, randomly assigned warming treatment.Warming treatmentThe warming treatment conducted end growing season 2019, transplanting entire plant communities lower elevation (c. +3°C).\nupslope left-hand corner turf marked toothpick turfs placed similar position relative slope block orientation destination site.\nused knife cut turfs 50 x 50 cm depth c. 10 - 25 cm, unless soil shallower, case alpine plots.\nexcavation, turfs packed cardboard box transported respective target sites within one day. control plots excavated moved.\nlocal transplants, control transplanting effect, tested previous project transplanting affect species composition Norway (Vandvik et al. 2020) China (Yang et al. 2018).\nFigure 2.8: turf transplanted.\nturfs fitted gaps created excavating turfs destination site, except low site, gaps made. block received one plot treatment.\nTurfs placed block numerical value (1 - 10) nitrogen level destination site originated origin site.\nTransplanted turfs carefully planted destination plots (destinationPlotID) ensuring turf orientation correct (using toothpick marking uphill left corner turf) soil surface plane surrounding vegetation, edges excavated plot good contact edges gap created original turf excavated plot.\nnecessary, loose soil carefully removed underside turf, local soil added gap around edges achieve .\nFigure 2.9: Turfs transplanted Liahovden lower elevation Joasete.\nNitrogen additionIn plot added slow dissolving fertilizer pellets (YaraBela OPTI-NS 27-0-0 (4S)).\nused oxidised nitrogen (N2O) formed mainly combustion processes, main sources atmospheric nitrogen deposition remote regions (.e., away intensive agriculture sources reduced nitrogen).\nfertilizer added start middle growing season 2020 - 2021 (2022).\nblock received one seven nitrogen levels: 0, 0.5, 1, 5, 10, 50, 100, 150 kg N ha−1 yr−1.\nThree blocks controls received 0 kg N ha−1 yr−1.natural nitrogen deposition Norway 1.5-3.5 kg N ha−1 yr−1.\ncritical load changing species composition alpine grasslands approximately 5-10 kg N ha−1 yr−1 Norway.\ntherefore wanted range nitrogen levels well critical load.Grazing treatmentThe warming nitrogen treatments crossed four grazing treatments.\nGrazing simulated clipping vegetation manually scissors 2-3 cm ground.\nfour grazing treatments natural grazing (N; outside fence), medium level grazing (M; 2x clipp), intensive level grazing (; 4x clipp), untreated control plots (C).\nintermediate clipping level reflects natural grazing level outside exclosure control differences grazing clipping (.e. clipping selective add faeces urine).\nmedium intensive plots clipped 2 4 times growing season.\nclipping treatment conducted 2020 - 2022.\nFigure 2.10: plot clipped biomass sorted functional groups.\n","code":""},{"path":"the-pftc6-study-system.html","id":"incline-project---climate-change-and-novel-interactions","chapter":"2 The PFTC6 study system","heading":"2.3 INCLINE project - Climate change and novel interactions","text":"","code":""},{"path":"trait-data-collection-and-measurements.html","id":"trait-data-collection-and-measurements","chapter":"3 Trait data collection and measurements","heading":"3 Trait data collection and measurements","text":"page contains resources :consider going fielddata collectionmeasurementsdata curationdata analysisWe provide protocols, important literature, tutorials, databases, code.","code":""},{"path":"trait-data-collection-and-measurements.html","id":"how-to-measure-plant-functional-traits","chapter":"3 Trait data collection and measurements","heading":"3.1 How to measure plant functional traits?","text":"protocol shows measure leaf functional traits trait wheelTW PFTC courses.\nprotocol based trait handbook Perez-Harguindeguy et al. (2013).\nFigure 3.1: different stages collection, processing curating data trait wheel.\nSampling individual plants fieldBe careful time working experiment avoid stepping experimental plots.\nMake familiar experimental design (check site maps), plot, blocks sites marked.collect plants, go plot use sitting mat sit next plot.\nCollect leaves minimize disturbing surroundings much possible.Intraspecific groupNOT FINAL PROTOCOLFollow species list group, starting highest priority species site.\ncollect plants within plots trampled zone around plots.\nFind 10 individuals species, ideally individual five leaves, three leaves minimum.\nindividual least two meters away , avoid sampling individuals genetic individual.\nChoose reproductively mature adults fully expanded leaves (.e. seedlings).\nChoose individuals healthy-looking leaves (.e. grazed, signs pathogen herbivore attack, discoloration).\nuprooting individual, measure height (see ).\nlarge individuals large uproot (e.g. ferns), collect 5 leaves individual, making sure include petiole.\nuncertain whether something leaf vs. leaflet, ask group leader.\nfind 10 individuals species, ok.\nreasonable search, move .Global change groupEach plot 50 x 50 cm large inner outer part (see Figure 3.2).\nplots marked metal tubes corner label top.\nleaves collected outer part (destructive part) possible inner part stay untouched.\nFigure 3.2: Experimental design (left) organization plot (right).\naim collect leaves species make 80% cover plot.\nplot generate species list.\ncode generate species list:plot species find 5 individuals spread across plot avoid sampling clones.\nChoose reproductively mature adults fully expanded leaves (.e. seedlings) healthy-looking leaves (.e. grazed, signs pathogen herbivore attack, discoloration).\ngrazed/clipped leaves grazing treatments?Measure height individual note height zip-loc bag (see ).Collect 1 leaf individual, making sure include petiole see Figure 3.3.\nuncertain whether something leaf vs. leaflet, ask group leader.find 5 individuals species, ok.\nreasonable search, move next species plot.\nFigure 3.3: Leaf anatomy\nMeasuring vegetative height individual plants field:Measure vegetative height individual plant (see Figure 3.4.\nVegetative height shortest distance main photosynthetic tissue plant ground, excluding reproductive structure (e.g. buds, flowers fruits).\nLeave plant ’s natural form stretch plant bends.\nFigure 3.4: Illustrations measure vegetative height.\nRecord measurement legibly (see Figure 3.5 write numbers) zip-loc bag.\nPlace leaf/leaves individual bag wet paper towels transfer lab.\nFigure 3.5: one approved way write numbers!\nPreparing leaves measuring traits lab:Select one (global change group) five (intraspecific group) leaf/leaves per individual.\nanalysing chemical traits percent P, C, N isotopes, certain amount dry biomass needed.\nMake sure collecting 0.03 g (30 mg) dried leaf material.\nOtherwise select several leaves enough dry weight (bulk sample).Add special rules Norwegian leaves.collecting leaf, include petiole rachis (see Figure 3.3).\nPat leaf dry tissue visible water surface.\nAdd barcode sticker envelope.\nAttach sticker stapler.\nFill information ‘collection day’ ‘Bulk nr/length’, see Figure 3.6 .\nCheck table options information.\nPlace leaf inside envelope\nPut envelope box next step.\nMake sure envelopes kept wet times.\nFigure 3.6: Sticker barcode example\nwrite envelopeWet massMake sure envelopes still kept wet.\nWeigh leaf write weight envelope, including digits.Measure leaf area using scannerStart setupConnect Laptop Raspberry PI.\nConnect PI ethernet cable laptop.\nConnect scanner PI.\nConnect barcode scanner PI.\nConnect power cable PI.Wait one minute.Open VNC Viewer type IP address corresponding PI:spare SD card IP address pi ! (???)asked type username password:Username: piPassword: pftcResize screen convenience.Scan leavesMake sure envelopes still kept wet.\nCheck scanner clean free debris.\nClean needed.\nPlace wet leaf face-scanner.\nMake sure leaf folded leaflets overlap.\nleaf go way edge scanner, picture cropped.\ncan cut leaf several pieces needed, please make remark (e.g. cut 3).\ncan tape leaf scanner using transparent tape folds (e.g. grasses).graminoids (grasses, sedges, rushes):\nSpread graminoid blades flat tape scanner necessary hold place.Exceptions\nFestuca species naturally folded unfolded.Exclude leaf sheath (see Figure 3.7).\nFigure 3.7: Leaf blade sheats\nScan, save check leafClick leaf icon (needs done first time).\nstart scanning program.\nscanner found, wait bit try .\nCheck settings scanner.\nset standard, please touch needed.scanner settings :saved Desktop/leaf_scans/Type: JPEGColourFull colour range300dpiFrom , leaf:Press scan (bottom window) wait couple seconds scanning process done.\nnew window pop .\nAdjust zoom see full picture (25%).\nCheck quality scan (whole leaf scanned, leaf upside , dirt scan, etc.).\nscan ok, adjust leaf repeat scan.scan ok, click green save button save scan.\nMake sure cursor marks filename (default).\nScan barcode envelope leaf scanned barcode reader.\nfilename something like: AAA4667 (3 letters 4 digits).\nscan saved, PI check LeafID scanning settings (dpi, etc.) correct.\nanything wrong, open window error message see Figure 3.8.\nPlease read !\nFigure 3.8: Error message.\nClick anywhere window disappear.\nSave scan correct name scan leaf settings wrong.\nMAKE SURE DELETE SCAN WRONG NAME SETTING.\nTick box envelope leaf scanned.\nMake sure scanned leaves kept wet move next station.time time:finished scanning click yoda icon.\ncheck leafIDs.\nanything wrong open window indicate scans wrong.\nMake sure fix wrong leafIDs duplicate scans leaving station.leaving station:Copy scans onto stick deposit PFTC6 hard drive.\nShut pi.\nWait 1 min disconnect power.Leaf thicknessMake sure envelopes still kept wet.\nThickness varies surface leaf; generally, leaf thickest midrib, primary veins, margins, leaf base.\nAvoid midrib measuring leaf thickness, unless leaf small.\nTake three thickness measurements several points lamina note envelope.\n, later calculate average thickness.\nleaf small, may possible take three unique measurements.Ferns Make sure measure thickness spore-producing sori lower side fern frond.Data entryIdeally envelope still kept wet point case information missing.\nGo google sheet.\nConnect barcode scanner computer.\nScan barcode envelope.\nMake sure cursor right cell (ID).\nEnter data envelope (details see table ).\ninformation missing, check forgotten.\nleaf scanned, one thickness measurement missing, etc.\nanything missing bring leaf back according station trait wheel.\nfinished, check box envelope data entered.\nTake picture envelope.\nBring envelop drying station.write envelopeDry massThe leaves dried oven 72 hours.Data checkingCheck scans\nFind folder leave scans google drive: link\nOpen scan check follwing criterias:whole leaf scan?nothing else scanned (cable, paper,…)?dirty scan?leaf cut? yes, indicated envelope?many leaves scan? > 1 remark envelope?Check data\nOpen RStudio project R script (…).\nDownload trait data google sheet.\nCheck leafID valid.\nCheck variables valid entries. E.g. correct day, site name, elevations, etc.\nCheck missing values can found envelope retrieved data.\nPlot data check traits unrealistic values.\ndetails see section data curation.Data documentationDescribing method\nDescribing data\n…","code":"\nthreshold <-  80\n\ncover |> \n  select(turfID, species, cover) |> \n  group_by(turfID) |> \n  arrange(turfID, -cover) |> \n  mutate(cumsum = cumsum(cover)) |> \n  filter(cumsum <= threshold)"},{"path":"working-with-pftc-data.html","id":"working-with-pftc-data","chapter":"4 Working with PFTC data","heading":"4 Working with PFTC data","text":"","code":""},{"path":"working-with-pftc-data.html","id":"pftc-data-repositories","chapter":"4 Working with PFTC data","heading":"4.1 PFTC data repositories","text":"","code":""},{"path":"working-with-pftc-data.html","id":"data-repos","chapter":"4 Working with PFTC data","heading":"4.1.1 Data repos","text":"cleaned datasets PFTC courses stored OSF repository (short repo).\ncourse ’s data repo.\nfollowing table shows link repos.","code":""},{"path":"working-with-pftc-data.html","id":"data-paperdocumentation","chapter":"4 Working with PFTC data","heading":"4.1.2 Data paper/documentation","text":"site, experiment, data collection methods data dictionaries course described data papers.\ninformation can also found GitHub readme file.Read papers documentation carefully using data.","code":""},{"path":"working-with-pftc-data.html","id":"data-usage-and-citation","chapter":"4 Working with PFTC data","heading":"4.1.3 Data usage and citation","text":"data available use teaching purposes CC-licence.\nsuggest cite data paper available, alternatively OSF repo.\nappreciate contacted advice collaboration, relevant, users data.\ncases data make >10% data used downstream publication, suggest contacting us contribution collaboration.","code":""},{"path":"working-with-pftc-data.html","id":"download-pftc-data","chapter":"4 Working with PFTC data","heading":"4.2 Download PFTC data","text":"created R package download data, called dataDownloader.\nusing package first time need install package using command .\nused , just run second line code load package.Now can download files need.\nLet’s download community data trait Svalbard course.","code":"\ndevtools::install_github(\"Between-the-Fjords/dataDownloader\")\nlibrary(dataDownloader)\nget_file(node = \"smbqh\",\n         file = \"PFTC4_Svalbard_2018_Gradient_Traits.csv\",\n         path = \"webpage/data\",\n         remote_path = \"Traits\")\n                       \nget_file(node = \"smbqh\",\n         file = \"PFTC4_Svalbard_2018_Community_Gradient.csv\",\n         path = \"webpage/data\",\n         remote_path = \"Community\")\n                       "},{"path":"working-with-pftc-data.html","id":"exercise","chapter":"4 Working with PFTC data","heading":"Exercise","text":"Now turn.\nCopy code console download data.","code":""},{"path":"data-curation-and-analysis.html","id":"data-curation-and-analysis","chapter":"5 Data curation and analysis","heading":"5 Data curation and analysis","text":"","code":""},{"path":"data-curation-and-analysis.html","id":"introduction-to-rrstudio-data-analysis-and-more","chapter":"5 Data curation and analysis","heading":"5.1 Introduction to R/RStudio, data analysis and more","text":"Biostats books extensive resource getting started R RStudio, working R, coding, using Rmarkdown, git GitHub creating R package.","code":""},{"path":"data-curation-and-analysis.html","id":"data-curation","chapter":"5 Data curation and analysis","heading":"5.2 Data curation","text":"Data curation, transformation cleaning first step digitizing data.\ndataset checked errors corrected best possible.\ntutorial shows check dataset errors correct .tutorial working trait dataset Svalbard.\nSee section 4 access data information study, experiment datasets.","code":""},{"path":"data-curation-and-analysis.html","id":"useful-packages","chapter":"5 Data curation and analysis","heading":"5.2.1 Useful packages","text":"couple R packages useful work.\nFirst, tidyverse collection R packages used basic data manipulation analysis.never used packages need install first using function install.packages(\"tidyverse\").\nOtherwise, can just load packages.Second, another useful package data curation tidylog, built dplyr tidyr packages provides useful information functions used.Tidylog example tell many rows removed remaining using filter() function many rows match using join function.\ninformation always indicated absolute numbers percentage.\nadditional information useful check right observations removed manipulated, mistakes easily done.Let’s install /load tidylog.Note, tidylog loaded automatically prioritize tidylog function dplyr tidyr functions.\nactively choose want use tidylog version using notation: dplyr::filter().","code":"\n\nlibrary(tidyverse)\n\nlibrary(tidylog)"},{"path":"data-curation-and-analysis.html","id":"import-data","chapter":"5 Data curation and analysis","heading":"5.2.2 Import data","text":"first step import data R.\ndata stored csv file can use function read_csv() import data.\ndata another format importing data new , look page.Give dataset name indicates raw data.dataset contains measurements 14 traits two elevational gradients Svalbard.\ntraits measured individual plants 21 different graminoid forb species.\ninformation sites, traits measurements see .manipulationLet us introduce errors dataset.code hidden.\nwant replicate code introduce errors can find code (add link!!!).","code":"\n\nraw_traits <- read_csv(\"data/PFTC4_Svalbard_2018_Gradient_Traits.csv\")\n#> Rows: 11345 Columns: 15\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr  (7): Project, Gradient, PlotID, ID, Functional_group, Taxon, Trait\n#> dbl  (7): Year, Site, Individual_nr, Value, Elevation_m, Latitude_N, Longitu...\n#> date (1): Date\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."},{"path":"data-curation-and-analysis.html","id":"first-check-of-the-dataset","chapter":"5 Data curation and analysis","heading":"5.2.3 First check of the dataset","text":"typing raw_traits console display first rows columns dataset.top can see dataset 11346 observations 12 columns.\nnumbers give first impression imported right file, observations columns .","code":"\n\nraw_traits\n#> # A tibble: 11,346 × 12\n#>    Date       Gradient  Site PlotID Individual_nr ID      Taxon    Trait   Value\n#>    <chr>      <chr>    <dbl> <chr>          <dbl> <chr>   <chr>    <chr>   <dbl>\n#>  1 2018-07-20 B            5 D                  1 AIB1395 saxifra… Plan… 6.5 e+0\n#>  2 2018-07-20 B            5 D                  1 AIB1395 saxifra… Wet_… 2.92e-2\n#>  3 2018-07-20 B            5 D                  1 AIB1395 saxifra… Dry_… 4   e-3\n#>  4 2018-07-20 B            5 D                  1 AIB1395 saxifra… Leaf… 5.66e-1\n#>  5 2018-07-20 B            5 D                  1 AIB1395 saxifra… Leaf… 6.75e-1\n#>  6 2018-07-20 B            5 D                  1 AIB1395 saxifra… SLA_… 1.69e+2\n#>  7 2018-07-20 B            5 D                  1 AIB1395 saxifra… LDMC  1.37e-1\n#>  8 2018-07-20 B            5 D                  1 AIB1395 saxifra… C_pe… 3.89e+1\n#>  9 2018-07-20 B            5 D                  1 AIB1395 saxifra… N_pe… 1.14e+0\n#> 10 2018-07-20 B            5 D                  1 AIB1395 saxifra… CN_r… 3.41e+1\n#> # … with 11,336 more rows, and 3 more variables: Elevation_m <dbl>,\n#> #   Latitude_N <dbl>, Longitude_E <dbl>"},{"path":"data-curation-and-analysis.html","id":"check-the-data-type","chapter":"5 Data curation and analysis","heading":"5.2.4 Check the data type","text":"next thing check variables right data type (class R terminology).\nvariable output indicates data type. common types dbl (numeric integer), chr (character), date (date).want know data types see .Now want check variables right data type.\nfirst variable Date character, correct.\nprobably means one several observations wrong date.\nLet us check different values variable Date.\ncan use function distinct() variable Date.can see 6 distinct dates variable.\nOne dates “18”, correct date format turned variable character.\nNote additional information tidylog package distinct() function.\nshows number rows removed remaining.next step check problem occurred.\ncan use function filter() extract observations date 18.\ncan use .data.frame() display whole table.see single observation (multiple traits) wrong date.\nnext step check raw data, notes, photos, etc. find correct date observations.\nimportant keep data entry sheets, take photo keep field notes able fix problems.Since value date 18, assume now typo correct date 2018-07-18.\nLet’s replace value give variable right class.use function mutate() adds manipulates column.\nInside mutate use case_when() function replace date specific ID.\nusing function single statement, however powerful function allow multiple statements (many else conditions).\ngive variable correct class, use ymd() function lubridate package.\nNote now assign table new name make change permanent.important step cleaning data check done right thing.\ntidylog functions show 7 observation Date changed.\nmatches number observations wrong date.sure can look specific leaf (ID == “AMO3822”) see date now corrected.\nAnother way run distinct(Date) function .date fixed.","code":"\n\nraw_traits |> \n  distinct(Date)\n#> distinct: removed 11,338 rows (>99%), 8 rows remaining\n#> # A tibble: 8 × 1\n#>   Date      \n#>   <chr>     \n#> 1 2018-07-20\n#> 2 2018-07-18\n#> 3 2018-07-21\n#> 4 2018-07-24\n#> 5 2018-07-19\n#> 6 2018-07-17\n#> 7 18        \n#> 8 <NA>\n\nraw_traits |> \n  filter(Date == \"18\") |> \n  View()#> filter: removed 11,339 rows (>99%), 7 rows remaining\n#> # A tibble: 7 × 12\n#>   Date  Gradient  Site PlotID Individual_nr ID      Taxon         Trait    Value\n#>   <chr> <chr>    <dbl> <chr>          <dbl> <chr>   <chr>         <chr>    <dbl>\n#> 1 18    C            1 A                  3 AMO3822 salix polaris Plant… 1.1 e+0\n#> 2 18    C            1 A                  3 AMO3822 salix polaris Wet_M… 5.76e-3\n#> 3 18    C            1 A                  3 AMO3822 salix polaris Dry_M… 2   e-3\n#> 4 18    C            1 A                  3 AMO3822 salix polaris Leaf_… 1.88e-1\n#> 5 18    C            1 A                  3 AMO3822 salix polaris Leaf_… 2.84e-1\n#> 6 18    C            1 A                  3 AMO3822 salix polaris SLA_c… 1.42e+2\n#> 7 18    C            1 A                  3 AMO3822 salix polaris LDMC   3.47e-1\n#> # … with 3 more variables: Elevation_m <dbl>, Latitude_N <dbl>,\n#> #   Longitude_E <dbl>\n\nraw_traits <- raw_traits |> \n  mutate(Date = case_when(ID == \"AMO3822\" ~ \"2018-07-18\",\n                          TRUE ~ Date)) |> \n  mutate( Date = ymd(Date))\n#> mutate: changed 7 values (<1%) of 'Date' (0 new NA)\n#> mutate: converted 'Date' from character to Date (0 new NA)\n\nraw_traits |> \n  filter(ID == \"AMO3822\") |> \n  select(Date)\n#> filter: removed 11,339 rows (>99%), 7 rows remaining\n#> select: dropped 11 variables (Gradient, Site, PlotID, Individual_nr, ID, …)\n#> # A tibble: 7 × 1\n#>   Date      \n#>   <date>    \n#> 1 2018-07-18\n#> 2 2018-07-18\n#> 3 2018-07-18\n#> 4 2018-07-18\n#> 5 2018-07-18\n#> 6 2018-07-18\n#> 7 2018-07-18"},{"path":"data-curation-and-analysis.html","id":"exercise-1","chapter":"5 Data curation and analysis","heading":"Exercise","text":"Now turn.\nCheck data type variable Date now correct.type raw_traits look whole dataset datatype variable indicateduse class(raw_traits$Date) tell directly type class variable hasuse map(raw_traits, class) get class variable dataframe","code":""},{"path":"data-curation-and-analysis.html","id":"check-for-duplicates","chapter":"5 Data curation and analysis","heading":"5.2.5 Check for duplicates","text":"Another common problem duplicate observations.\ncan happen data entered twice.\nfind duplicates check combination variables unique.\ndataset, expect Date, Gradient, Site, PlotID, Individual_nr, ID, Taxon Trait unique, occurring .check , can group_by() variables filter() observations occur .one duplicate entry.Note Value included group_by().\ndone intentionally, common mistake duplicate, different value.\neither one variables wrong, e.g. wrong Site therefore appears duplicate.\nAlternatively, leaf measured twice accident, likely give two slightly different values.\ngetting duplicate, different options duplicate considered carefully checked raw data.case, assume leaf measured , data entered twice.\nThus, two entries exact duplicates.fix duplicate problem, group variables expect unique.\nuse distinct() argument .keep_all = TRUE remove duplicates.Tidylog allows us see happens many rows removed.\n8 grouping variables expected, one row filtered away, duplicated row.can also run code check duplicate gone.","code":"\n\nraw_traits |> \n  group_by(Date, Gradient, Site, PlotID, Individual_nr, ID, Taxon, Trait) |> \n  filter(n() > 1)\n#> group_by: 8 grouping variables (Date, Gradient, Site, PlotID, Individual_nr, …)\n#> filter (grouped): removed 11,344 rows (>99%), 2 rows remaining\n#> # A tibble: 2 × 12\n#> # Groups:   Date, Gradient, Site, PlotID, Individual_nr, ID, Taxon, Trait [1]\n#>   Date       Gradient  Site PlotID Individual_nr ID      Taxon     Trait   Value\n#>   <date>     <chr>    <dbl> <chr>          <dbl> <chr>   <chr>     <chr>   <dbl>\n#> 1 2018-07-20 B            3 C                  3 BEK3638 salix po… Dry_… 0.00275\n#> 2 2018-07-20 B            3 C                  3 BEK3638 salix po… Dry_… 0.00275\n#> # … with 3 more variables: Elevation_m <dbl>, Latitude_N <dbl>,\n#> #   Longitude_E <dbl>\n\nraw_traits2 <- raw_traits |> \n  group_by(Date, Gradient, Site, PlotID, Individual_nr, ID, Taxon, Trait) |> \n  distinct(.keep_all = TRUE)\n#> group_by: 8 grouping variables (Date, Gradient, Site, PlotID, Individual_nr, …)\n#> distinct (grouped): removed one row (<1%), 11,345 rows remaining"},{"path":"data-curation-and-analysis.html","id":"check-for-missing-data","chapter":"5 Data curation and analysis","heading":"5.2.6 Check for missing data","text":"common problem dataset missing values.detect missing values…missing values detected one decide missing data can recovered, missing values removed dataset.operation removed 3 rows, number NA’s dataset.","code":"\n\nraw_traits <- raw_traits |> \n  drop_na(Value)\n#> drop_na: removed 3 rows (<1%), 11,343 rows remaining"},{"path":"data-curation-and-analysis.html","id":"check-values-within-variables","chapter":"5 Data curation and analysis","heading":"5.2.7 Check values within variables","text":"4 different versions oxyra digyna!\nrename\nalternative use dictionary.","code":"\n\nraw_traits |> \n  distinct(Taxon) |> \n  arrange(Taxon) |> \n  print(n = Inf)\n#> distinct: removed 11,299 rows (>99%), 44 rows remaining\n#> # A tibble: 44 × 1\n#>    Taxon                   \n#>    <chr>                   \n#>  1 alopecurus ovatus       \n#>  2 aulacomnium turgidum    \n#>  3 bistorta vivipara       \n#>  4 calamagrostis neglecta  \n#>  5 cassiope tetragona      \n#>  6 cerastium arcticum      \n#>  7 dicranum sp             \n#>  8 draba arctica           \n#>  9 draba oxycarpa          \n#> 10 dryas octopetala        \n#> 11 equisetum arvense       \n#> 12 equisetum scirpoides    \n#> 13 festuca rubra           \n#> 14 festuca viviparoidea    \n#> 15 hylocomium splendens    \n#> 16 luzula confusa          \n#> 17 luzula nivalis          \n#> 18 micranthes hieraciifolia\n#> 19 micranthes nivalis      \n#> 20 niphotrichum canescens  \n#> 21 niphotrichum sp         \n#> 22 oxiria digyna           \n#> 23 oxyra digyna            \n#> 24 oxyria digina           \n#> 25 oxyria digyna           \n#> 26 pedicularis hirsuta     \n#> 27 poa alpina              \n#> 28 poa arctica             \n#> 29 poa pratensis           \n#> 30 polytrichum piliferum   \n#> 31 polytrichum sp          \n#> 32 potentilla hyparctica   \n#> 33 ranunculus sulphureus   \n#> 34 salix polaris           \n#> 35 sanionia sp             \n#> 36 saxifraga cernua        \n#> 37 saxifraga cespitosa     \n#> 38 saxifraga hirculus      \n#> 39 saxifraga oppositifolia \n#> 40 silene acaulis          \n#> 41 stellaria longipes      \n#> 42 syntrichia ruralis      \n#> 43 tomentypnum nitens      \n#> 44 trisetum spicatum\n\nraw_traits <- raw_traits |> \n  mutate(Taxon = if_else(Taxon %in% c(\"oxiria digyna\", \"oxyria digina\", \"oxyra digyna\"), \"oxyria digyna\", Taxon))\n#> mutate: changed 28 values (<1%) of 'Taxon' (0 new NA)"},{"path":"data-curation-and-analysis.html","id":"visualise-data","chapter":"5 Data curation and analysis","heading":"5.2.8 Visualise data","text":"errors problems data difficult detect.\nChecking measurements realistic nearly impossible looking dataframe.\n, visualising data much effective.Make histograms, shows range valuesNote size traits (height, mass, area thickness) long tails.\ncommon log transform variables better see full range variables.Leaf area huge tail goes almost 20’000 cm2.\nleaf almost 2 m2, nearly impossible.\nvalue needs checked, typo.Let’s log transform size traits.make plot .size traits now easier read.Another way check data plot correlated values .\ndataset, can plot dry mass leaf area. expect positive correlation two variables, large leaves higher dry mass.can clearly see outlier 2 m2 leaf.\ncan also see cloud points separate rest data.\ndata sensible leaf area dry weight small.\npossible measured wrong unit.","code":"\nraw_traits |> \n  ggplot(aes(x = Value, fill = Gradient)) +\n  geom_density(alpha = 0.7) +\n  scale_fill_manual(values = c(\"green4\", \"grey\")) +\n  facet_wrap(~ Trait, scales = \"free\")\n\nraw_traits <- raw_traits |> \n  mutate(Value = if_else(Trait %in% c(\n    \"Plant_Height_cm\",\n    \"Wet_Mass_g\",\n    \"Dry_Mass_g\",\n    \"Leaf_Area_cm2\",\n    \"Leaf_Thickness_mm\"), log(Value), Value),\n    Trait = recode(Trait,\n                   \"Plant_Height_cm\" = \"Plant_Height_cm_log\",\n                   \"Wet_Mass_g\" = \"Wet_Mass_g_log\",\n                   \"Dry_Mass_g\" = \"Dry_Mass_g_log\",\n                   \"Leaf_Area_cm2\" = \"Leaf_Area_cm2_log\",\n                   \"Leaf_Thickness_mm\" = \"Thickness_mm_log\"))\n#> Warning in log(Value): NaNs produced\n#> mutate: changed 5,428 values (48%) of 'Trait' (0 new NA)\n#>         changed 5,428 values (48%) of 'Value' (0 new NA)\nraw_traits |> \n  ggplot(aes(x = Value, fill = Gradient)) +\n  geom_density(alpha = 0.7) +\n  scale_fill_manual(values = c(\"green4\", \"grey\")) +\n  facet_wrap(~ Trait, scales = \"free\")\nraw_traits |> \n  pivot_wider(names_from = Trait, values_from = Value) |> \n  ggplot(aes(x = Dry_Mass_g_log, y = Leaf_Area_cm2_log)) +\n  geom_point()"},{"path":"data-curation-and-analysis.html","id":"plant-community-composition-data","chapter":"5 Data curation and analysis","heading":"5.3 Plant community composition data","text":"tutorial need tidyverse, vegan, ggvegan broom package.use data PFTC3 5 Peru.Download dataThis dataset contains percentage cover 143 species along elevational gradients Peru.\nThree different treatments related fire history: control (C), burnt (B) newly burnt (NB)).\ninformation sites measurements see .read data use code .\nNote remove treatment BB observation one site.","code":"\n\nlibrary(dataDownloader)\n\nget_file(node = \"gs8u6\",\n         file = \"PFTC3-Puna-PFTC5_Peru_2018-2020_CommunityCover_clean.csv\",\n         path = \"clean_data\",\n         remote_path = \"community\")\n\ncomm <- read_csv(\"data/PFTC3-Puna-PFTC5_Peru_2018-2020_CommunityCover_clean.csv\") |> \n  filter(treatment != \"BB\")\n#> Rows: 3665 Columns: 15\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr (8): season, month, site, treatment, family, functional_group, taxon, co...\n#> dbl (7): year, plot_id, cover, burn_year, elevation, latitude, longitude\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."},{"path":"data-curation-and-analysis.html","id":"diversity-indices","chapter":"5 Data curation and analysis","heading":"5.3.1 Diversity indices","text":"One way quantify number species species calculate diversity indices.\ncommon indices species richness, diversity evenness.calculate indices using vegan package.can now test diversity indices different sites along elevational gradient treatments.\nuse simple linear model diversity index response interaction elevation treatment predictor.Species richness diversity increase NB treatment, treatments.Check model assumptionsTo check model assumptions met, use performance package.Diversity change elevationWe can plot diversity indices across elevation.Discuss restuls…","code":"\n\n## Calculate responses\ndiversity_index <- comm  |> \n  group_by(year, month, site, elevation, treatment, plot_id)  |> \n  summarise(richness = n(),\n            diversity = diversity(cover),\n            evenness = diversity/log(richness))  |> \n  # make long dataframe\n  pivot_longer(cols = c(richness:evenness), names_to = \"index\", values_to = \"value\") |> \n  mutate(index = factor(index, levels = c(\"richness\", \"diversity\", \"evenness\")))\n#> `summarise()` has grouped output by 'year', 'month', 'site', 'elevation',\n#> 'treatment'. You can override using the `.groups` argument.\n\ndiversity_result <- diversity_index  |> \n  filter(treatment %in% c(\"C\", \"B\", \"NB\"))  |> \n  mutate(treatment = factor(treatment, levels = c(\"C\", \"B\", \"NB\")))  |> \n  group_by(index)  |> \n  nest(data = -c(index))  |> \n  mutate(model = map(data, ~lm(value ~ elevation * treatment, data = .x)),\n         result = map(model, tidy))  |> \n  unnest(result)\n\ndiversity_result |> \n  select(index, term:p.value) |> \n  kbl(digits = 2)\n\nrichness <- diversity_index |> \n  filter(index == \"richness\")\n\nfit <- lm(value ~ elevation * treatment, data = richness)\n\nplot <- check_model(fit)\n\nplot\n\ndiversity_index %>%\n  ggplot(aes(x = elevation, y = value, colour = treatment, fill = treatment)) +\n  geom_point(alpha = 0.4) +\n  geom_smooth(method = \"lm\", formula = \"y ~ x\", alpha = 0.2) +\n  scale_colour_manual(\"Treatment\", values = puna_treatment_colour$colour[1:3]) +\n  scale_fill_manual(\"Treatment\", values = puna_treatment_colour$colour[1:3]) +\n  labs(x = \"Elevation m a.s.l\", y = \"\") +\n  guides(linetype = FALSE,\n         fill = FALSE,\n         colour = guide_legend(override.aes = list(fill = NA))) +\n  facet_wrap( ~ index, scales = \"free_y\")\n#> Warning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> =\n#> \"none\")` instead."},{"path":"data-curation-and-analysis.html","id":"multivariate-analysis---nmds-ordination","chapter":"5 Data curation and analysis","heading":"5.3.2 Multivariate analysis - NMDS ordination","text":"addition univariate descriptor communities diversity indices, might interested species composition along elevational gradient.common method non-metric multidimensional scaling (NMDS).\nNMDS collapses information multiple dimensions dimensions.\nallows visualise data easily.NMDS can done using metaMDS() function form vegan package.Check stress… (explain done)Discuss results stress plot desicion taken. many dimesions chosen.VisualiseThe output ordination can visualised.Discuss results.","code":"\n\ncover_fat <- comm %>%\n  select(-family, -functional_group, -c(burn_year:course)) %>%\n  arrange(year, season, month) %>%\n  pivot_wider(names_from = \"taxon\", values_from = \"cover\", values_fill = 0) %>%\n  ungroup()\n\ncover_fat_spp <- cover_fat %>% select(-(year:plot_id))\n\nset.seed(32)\nNMDS <- metaMDS(cover_fat_spp,\n                noshare = TRUE,\n                try = 30,\n                trace = 0)\n\nfNMDS <- fortify(NMDS) %>%\n  filter(Score == \"sites\") %>%\n  bind_cols(cover_fat %>% select(year:plot_id))\n\n  NMDS_1 <-  metaMDS(cover_fat_spp, noshare = TRUE, try = 30, k = 1)\n  NMDS_2 <-  metaMDS(cover_fat_spp, noshare = TRUE, try = 30, k = 2)\n  NMDS_3 <-  metaMDS(cover_fat_spp, noshare = TRUE, try = 30, k = 3)\n  NMDS_4 <-  metaMDS(cover_fat_spp, noshare = TRUE, try = 30, k = 4)\n  NMDS_5 <-  metaMDS(cover_fat_spp, noshare = TRUE, try = 30, k = 5)\n  NMDS_6 <-  metaMDS(cover_fat_spp, noshare = TRUE, try = 30, k = 6)\n\ntibble(\n    stress = c(NMDS_1$stress, NMDS_2$stress, NMDS_3$stress, NMDS_4$stress, NMDS_5$stress, NMDS_6$stress),\n    dimensions = c(1:6)) %>%\n    ggplot(aes(x = dimensions, y = stress)) +\n    geom_point()#> Square root transformation\n#> Wisconsin double standardization\n#> Using step-across dissimilarities:\n#> Too long or NA distances: 708 out of 21945 (3.2%)\n#> Stepping across 21945 dissimilarities...\n#> Connectivity of distance matrix with threshold dissimilarity 1 \n#> Data are connected\n#> Run 0 stress 0.3669738 \n#> Run 1 stress 0.3966017 \n#> Run 2 stress 0.5190487 \n#> Run 3 stress 0.5744689 \n#> Run 4 stress 0.4411074 \n#> Run 5 stress 0.574498 \n#> Run 6 stress 0.5139886 \n#> Run 7 stress 0.5745687 \n#> Run 8 stress 0.4332597 \n#> Run 9 stress 0.5172638 \n#> Run 10 stress 0.5745844 \n#> Run 11 stress 0.4944197 \n#> Run 12 stress 0.417065 \n#> Run 13 stress 0.5063905 \n#> Run 14 stress 0.4471289 \n#> Run 15 stress 0.5745715 \n#> Run 16 stress 0.574576 \n#> Run 17 stress 0.4223127 \n#> Run 18 stress 0.5186829 \n#> Run 19 stress 0.5078911 \n#> Run 20 stress 0.5160806 \n#> Run 21 stress 0.4569249 \n#> Run 22 stress 0.4483193 \n#> Run 23 stress 0.4329702 \n#> Run 24 stress 0.5744662 \n#> Run 25 stress 0.5744928 \n#> Run 26 stress 0.5124116 \n#> Run 27 stress 0.5167869 \n#> Run 28 stress 0.5030833 \n#> Run 29 stress 0.4654018 \n#> Run 30 stress 0.511481 \n#> *** No convergence -- monoMDS stopping criteria:\n#>     11: stress ratio > sratmax\n#>     19: scale factor of the gradient < sfgrmin\n#> Square root transformation\n#> Wisconsin double standardization\n#> Using step-across dissimilarities:\n#> Too long or NA distances: 708 out of 21945 (3.2%)\n#> Stepping across 21945 dissimilarities...\n#> Connectivity of distance matrix with threshold dissimilarity 1 \n#> Data are connected\n#> Run 0 stress 0.20073 \n#> Run 1 stress 0.2182501 \n#> Run 2 stress 0.2083237 \n#> Run 3 stress 0.2005945 \n#> ... New best solution\n#> ... Procrustes: rmse 0.006078256  max resid 0.06685748 \n#> Run 4 stress 0.2007521 \n#> ... Procrustes: rmse 0.006366959  max resid 0.06729406 \n#> Run 5 stress 0.2355802 \n#> Run 6 stress 0.2225095 \n#> Run 7 stress 0.2011206 \n#> Run 8 stress 0.214649 \n#> Run 9 stress 0.2086967 \n#> Run 10 stress 0.2082084 \n#> Run 11 stress 0.2004971 \n#> ... New best solution\n#> ... Procrustes: rmse 0.00217813  max resid 0.02930483 \n#> Run 12 stress 0.2448126 \n#> Run 13 stress 0.2004924 \n#> ... New best solution\n#> ... Procrustes: rmse 0.0009213377  max resid 0.01260201 \n#> Run 14 stress 0.2366596 \n#> Run 15 stress 0.2219288 \n#> Run 16 stress 0.2007299 \n#> ... Procrustes: rmse 0.005094979  max resid 0.06565216 \n#> Run 17 stress 0.2007521 \n#> ... Procrustes: rmse 0.005304626  max resid 0.06601554 \n#> Run 18 stress 0.2200119 \n#> Run 19 stress 0.2465379 \n#> Run 20 stress 0.201122 \n#> Run 21 stress 0.212618 \n#> Run 22 stress 0.2490223 \n#> Run 23 stress 0.2456565 \n#> Run 24 stress 0.2351948 \n#> Run 25 stress 0.2011839 \n#> Run 26 stress 0.2005931 \n#> ... Procrustes: rmse 0.002075318  max resid 0.02814701 \n#> Run 27 stress 0.2007299 \n#> ... Procrustes: rmse 0.00506658  max resid 0.06559041 \n#> Run 28 stress 0.2110259 \n#> Run 29 stress 0.2136821 \n#> Run 30 stress 0.2004925 \n#> ... Procrustes: rmse 7.2719e-05  max resid 0.0005361616 \n#> ... Similar to previous best\n#> *** Solution reached\n#> Square root transformation\n#> Wisconsin double standardization\n#> Using step-across dissimilarities:\n#> Too long or NA distances: 708 out of 21945 (3.2%)\n#> Stepping across 21945 dissimilarities...\n#> Connectivity of distance matrix with threshold dissimilarity 1 \n#> Data are connected\n#> Run 0 stress 0.1496032 \n#> Run 1 stress 0.1496028 \n#> ... New best solution\n#> ... Procrustes: rmse 0.0004109622  max resid 0.004798846 \n#> ... Similar to previous best\n#> Run 2 stress 0.1496028 \n#> ... New best solution\n#> ... Procrustes: rmse 3.385516e-05  max resid 0.0001892113 \n#> ... Similar to previous best\n#> Run 3 stress 0.1496029 \n#> ... Procrustes: rmse 8.602209e-05  max resid 0.0004481636 \n#> ... Similar to previous best\n#> Run 4 stress 0.1496026 \n#> ... New best solution\n#> ... Procrustes: rmse 0.0001241784  max resid 0.001492955 \n#> ... Similar to previous best\n#> Run 5 stress 0.1496034 \n#> ... Procrustes: rmse 0.0003495415  max resid 0.003669896 \n#> ... Similar to previous best\n#> Run 6 stress 0.1496046 \n#> ... Procrustes: rmse 0.002793576  max resid 0.03467881 \n#> Run 7 stress 0.1496048 \n#> ... Procrustes: rmse 0.002795569  max resid 0.03469251 \n#> Run 8 stress 0.1496043 \n#> ... Procrustes: rmse 0.002785784  max resid 0.03460863 \n#> Run 9 stress 0.1496042 \n#> ... Procrustes: rmse 0.002779486  max resid 0.03453958 \n#> Run 10 stress 0.149612 \n#> ... Procrustes: rmse 0.002905389  max resid 0.03510331 \n#> Run 11 stress 0.1496031 \n#> ... Procrustes: rmse 0.0002450591  max resid 0.002602491 \n#> ... Similar to previous best\n#> Run 12 stress 0.1496045 \n#> ... Procrustes: rmse 0.002794077  max resid 0.0346816 \n#> Run 13 stress 0.1496031 \n#> ... Procrustes: rmse 0.0001597965  max resid 0.001086928 \n#> ... Similar to previous best\n#> Run 14 stress 0.1496047 \n#> ... Procrustes: rmse 0.002796931  max resid 0.03470258 \n#> Run 15 stress 0.1496029 \n#> ... Procrustes: rmse 0.0001716801  max resid 0.001949172 \n#> ... Similar to previous best\n#> Run 16 stress 0.1496081 \n#> ... Procrustes: rmse 0.0007773416  max resid 0.006660007 \n#> ... Similar to previous best\n#> Run 17 stress 0.1496036 \n#> ... Procrustes: rmse 0.0003405729  max resid 0.003538791 \n#> ... Similar to previous best\n#> Run 18 stress 0.1496049 \n#> ... Procrustes: rmse 0.002655481  max resid 0.03292451 \n#> Run 19 stress 0.1496044 \n#> ... Procrustes: rmse 0.002672476  max resid 0.03315833 \n#> Run 20 stress 0.1496044 \n#> ... Procrustes: rmse 0.002830271  max resid 0.03504831 \n#> Run 21 stress 0.149603 \n#> ... Procrustes: rmse 0.000143452  max resid 0.0013587 \n#> ... Similar to previous best\n#> Run 22 stress 0.1496151 \n#> ... Procrustes: rmse 0.002946852  max resid 0.03519211 \n#> Run 23 stress 0.1496042 \n#> ... Procrustes: rmse 0.0004387517  max resid 0.004368286 \n#> ... Similar to previous best\n#> Run 24 stress 0.1496047 \n#> ... Procrustes: rmse 0.002792242  max resid 0.03466513 \n#> Run 25 stress 0.1496095 \n#> ... Procrustes: rmse 0.002869195  max resid 0.03500028 \n#> Run 26 stress 0.1496031 \n#> ... Procrustes: rmse 0.000161386  max resid 0.001007451 \n#> ... Similar to previous best\n#> Run 27 stress 0.149604 \n#> ... Procrustes: rmse 0.0003265561  max resid 0.003195434 \n#> ... Similar to previous best\n#> Run 28 stress 0.1496034 \n#> ... Procrustes: rmse 0.0003205402  max resid 0.003133215 \n#> ... Similar to previous best\n#> Run 29 stress 0.1496043 \n#> ... Procrustes: rmse 0.002784911  max resid 0.03460711 \n#> Run 30 stress 0.1496035 \n#> ... Procrustes: rmse 0.0003698297  max resid 0.003956172 \n#> ... Similar to previous best\n#> *** Solution reached\n#> Square root transformation\n#> Wisconsin double standardization\n#> Using step-across dissimilarities:\n#> Too long or NA distances: 708 out of 21945 (3.2%)\n#> Stepping across 21945 dissimilarities...\n#> Connectivity of distance matrix with threshold dissimilarity 1 \n#> Data are connected\n#> Run 0 stress 0.1236357 \n#> Run 1 stress 0.1240154 \n#> ... Procrustes: rmse 0.03150932  max resid 0.09941104 \n#> Run 2 stress 0.1241406 \n#> Run 3 stress 0.1240211 \n#> ... Procrustes: rmse 0.03230265  max resid 0.09941862 \n#> Run 4 stress 0.1236349 \n#> ... New best solution\n#> ... Procrustes: rmse 0.0001169962  max resid 0.0006613207 \n#> ... Similar to previous best\n#> Run 5 stress 0.1240922 \n#> ... Procrustes: rmse 0.008361968  max resid 0.09420276 \n#> Run 6 stress 0.1238104 \n#> ... Procrustes: rmse 0.02818918  max resid 0.1205201 \n#> Run 7 stress 0.1240505 \n#> ... Procrustes: rmse 0.0306759  max resid 0.1001498 \n#> Run 8 stress 0.1245961 \n#> Run 9 stress 0.1240572 \n#> ... Procrustes: rmse 0.0290986  max resid 0.1001645 \n#> Run 10 stress 0.1236349 \n#> ... Procrustes: rmse 0.00089162  max resid 0.007473249 \n#> ... Similar to previous best\n#> Run 11 stress 0.1238541 \n#> ... Procrustes: rmse 0.02383616  max resid 0.1284415 \n#> Run 12 stress 0.1238256 \n#> ... Procrustes: rmse 0.02317068  max resid 0.1002362 \n#> Run 13 stress 0.1240649 \n#> ... Procrustes: rmse 0.03346715  max resid 0.1028719 \n#> Run 14 stress 0.1240161 \n#> ... Procrustes: rmse 0.0118338  max resid 0.09619942 \n#> Run 15 stress 0.1237134 \n#> ... Procrustes: rmse 0.02723612  max resid 0.09894111 \n#> Run 16 stress 0.1236339 \n#> ... New best solution\n#> ... Procrustes: rmse 0.0006986775  max resid 0.004219814 \n#> ... Similar to previous best\n#> Run 17 stress 0.1237204 \n#> ... Procrustes: rmse 0.02645367  max resid 0.09898438 \n#> Run 18 stress 0.1239427 \n#> ... Procrustes: rmse 0.02043016  max resid 0.100191 \n#> Run 19 stress 0.1229504 \n#> ... New best solution\n#> ... Procrustes: rmse 0.02501793  max resid 0.1597669 \n#> Run 20 stress 0.1240791 \n#> Run 21 stress 0.1229588 \n#> ... Procrustes: rmse 0.001804713  max resid 0.01919788 \n#> Run 22 stress 0.1236982 \n#> Run 23 stress 0.1239967 \n#> Run 24 stress 0.1240594 \n#> Run 25 stress 0.1236348 \n#> Run 26 stress 0.1237123 \n#> Run 27 stress 0.1240147 \n#> Run 28 stress 0.1240213 \n#> Run 29 stress 0.12396 \n#> Run 30 stress 0.1240317 \n#> *** No convergence -- monoMDS stopping criteria:\n#>     23: no. of iterations >= maxit\n#>      7: stress ratio > sratmax\n#> Square root transformation\n#> Wisconsin double standardization\n#> Using step-across dissimilarities:\n#> Too long or NA distances: 708 out of 21945 (3.2%)\n#> Stepping across 21945 dissimilarities...\n#> Connectivity of distance matrix with threshold dissimilarity 1 \n#> Data are connected\n#> Run 0 stress 0.1014859 \n#> Run 1 stress 0.1014859 \n#> ... New best solution\n#> ... Procrustes: rmse 0.001496211  max resid 0.01341869 \n#> Run 2 stress 0.1014882 \n#> ... Procrustes: rmse 0.0003613118  max resid 0.0030562 \n#> ... Similar to previous best\n#> Run 3 stress 0.1019811 \n#> ... Procrustes: rmse 0.01013506  max resid 0.05227495 \n#> Run 4 stress 0.1015739 \n#> ... Procrustes: rmse 0.003590735  max resid 0.02819999 \n#> Run 5 stress 0.1015006 \n#> ... Procrustes: rmse 0.001874394  max resid 0.01532635 \n#> Run 6 stress 0.1018107 \n#> ... Procrustes: rmse 0.008071745  max resid 0.04308882 \n#> Run 7 stress 0.1014854 \n#> ... New best solution\n#> ... Procrustes: rmse 0.001301816  max resid 0.01229766 \n#> Run 8 stress 0.1016368 \n#> ... Procrustes: rmse 0.00415404  max resid 0.04176875 \n#> Run 9 stress 0.101771 \n#> ... Procrustes: rmse 0.005992127  max resid 0.05172668 \n#> Run 10 stress 0.101486 \n#> ... Procrustes: rmse 0.001163481  max resid 0.009342148 \n#> ... Similar to previous best\n#> Run 11 stress 0.1014844 \n#> ... New best solution\n#> ... Procrustes: rmse 0.0005162083  max resid 0.003108608 \n#> ... Similar to previous best\n#> Run 12 stress 0.1020294 \n#> Run 13 stress 0.1015629 \n#> ... Procrustes: rmse 0.003142189  max resid 0.01789825 \n#> Run 14 stress 0.1014907 \n#> ... Procrustes: rmse 0.000584355  max resid 0.005003165 \n#> ... Similar to previous best\n#> Run 15 stress 0.1014848 \n#> ... Procrustes: rmse 0.0008144449  max resid 0.007596159 \n#> ... Similar to previous best\n#> Run 16 stress 0.1014845 \n#> ... Procrustes: rmse 0.0004405542  max resid 0.004920053 \n#> ... Similar to previous best\n#> Run 17 stress 0.1012551 \n#> ... New best solution\n#> ... Procrustes: rmse 0.02773564  max resid 0.1657609 \n#> Run 18 stress 0.1021218 \n#> Run 19 stress 0.1018503 \n#> Run 20 stress 0.1014859 \n#> ... Procrustes: rmse 0.02767256  max resid 0.1646763 \n#> Run 21 stress 0.101487 \n#> ... Procrustes: rmse 0.02771247  max resid 0.1652471 \n#> Run 22 stress 0.1018845 \n#> Run 23 stress 0.1023329 \n#> Run 24 stress 0.1014867 \n#> ... Procrustes: rmse 0.02778127  max resid 0.1637971 \n#> Run 25 stress 0.1013431 \n#> ... Procrustes: rmse 0.009275203  max resid 0.05384371 \n#> Run 26 stress 0.1012622 \n#> ... Procrustes: rmse 0.006106135  max resid 0.04427436 \n#> Run 27 stress 0.1015213 \n#> ... Procrustes: rmse 0.02779551  max resid 0.1627817 \n#> Run 28 stress 0.1016594 \n#> ... Procrustes: rmse 0.02781834  max resid 0.1594333 \n#> Run 29 stress 0.1015512 \n#> ... Procrustes: rmse 0.02786594  max resid 0.1633327 \n#> Run 30 stress 0.1015087 \n#> ... Procrustes: rmse 0.0277089  max resid 0.1632642 \n#> *** No convergence -- monoMDS stopping criteria:\n#>     23: no. of iterations >= maxit\n#>      7: stress ratio > sratmax\n#> Square root transformation\n#> Wisconsin double standardization\n#> Using step-across dissimilarities:\n#> Too long or NA distances: 708 out of 21945 (3.2%)\n#> Stepping across 21945 dissimilarities...\n#> Connectivity of distance matrix with threshold dissimilarity 1 \n#> Data are connected\n#> Run 0 stress 0.0871146 \n#> Run 1 stress 0.08846572 \n#> Run 2 stress 0.08713978 \n#> ... Procrustes: rmse 0.003713778  max resid 0.02036551 \n#> Run 3 stress 0.08878503 \n#> Run 4 stress 0.08735978 \n#> ... Procrustes: rmse 0.005332886  max resid 0.0277197 \n#> Run 5 stress 0.08943071 \n#> Run 6 stress 0.08942787 \n#> Run 7 stress 0.08719705 \n#> ... Procrustes: rmse 0.003194158  max resid 0.01283403 \n#> Run 8 stress 0.08757549 \n#> ... Procrustes: rmse 0.01025835  max resid 0.04840186 \n#> Run 9 stress 0.08980633 \n#> Run 10 stress 0.08778312 \n#> Run 11 stress 0.08898063 \n#> Run 12 stress 0.08979292 \n#> Run 13 stress 0.08716465 \n#> ... Procrustes: rmse 0.002855812  max resid 0.01809449 \n#> Run 14 stress 0.08880298 \n#> Run 15 stress 0.08992085 \n#> Run 16 stress 0.08726124 \n#> ... Procrustes: rmse 0.006536252  max resid 0.03952786 \n#> Run 17 stress 0.08927162 \n#> Run 18 stress 0.08747088 \n#> ... Procrustes: rmse 0.009478915  max resid 0.04331799 \n#> Run 19 stress 0.08725912 \n#> ... Procrustes: rmse 0.006182781  max resid 0.04046836 \n#> Run 20 stress 0.08713052 \n#> ... Procrustes: rmse 0.00294201  max resid 0.01589794 \n#> Run 21 stress 0.08711406 \n#> ... New best solution\n#> ... Procrustes: rmse 0.003584975  max resid 0.02486928 \n#> Run 22 stress 0.08744816 \n#> ... Procrustes: rmse 0.008395644  max resid 0.04549463 \n#> Run 23 stress 0.08718053 \n#> ... Procrustes: rmse 0.005427267  max resid 0.03738844 \n#> Run 24 stress 0.08721509 \n#> ... Procrustes: rmse 0.006264433  max resid 0.03730534 \n#> Run 25 stress 0.08721308 \n#> ... Procrustes: rmse 0.00452053  max resid 0.01489785 \n#> Run 26 stress 0.08719441 \n#> ... Procrustes: rmse 0.005963353  max resid 0.02706668 \n#> Run 27 stress 0.08711333 \n#> ... New best solution\n#> ... Procrustes: rmse 0.002752416  max resid 0.01551721 \n#> Run 28 stress 0.08715922 \n#> ... Procrustes: rmse 0.003436136  max resid 0.02777786 \n#> Run 29 stress 0.08712261 \n#> ... Procrustes: rmse 0.002925042  max resid 0.02545719 \n#> Run 30 stress 0.08713603 \n#> ... Procrustes: rmse 0.00156582  max resid 0.007586865 \n#> ... Similar to previous best\n#> *** Solution reached\n\nfNMDS %>%\n  as_tibble() %>%\n  mutate(treatment = factor(treatment, levels = c(\"C\", \"B\", \"NB\")),\n         site = factor(site, levels = c(\"WAY\", \"ACJ\", \"PIL\", \"TRE\", \"QUE\", \"OCC\")),\n         season = if_else(season == \"dry_season\",\n                          \"Dry season\",\n                          \"Wet season\")) %>%\n  ggplot(aes(x = NMDS1, y = NMDS2, colour = site, shape = treatment)) +\n  geom_point() +\n  scale_colour_manual(\"Site\", values = puna_site_colour$colour) +\n  scale_shape_manual(\"Treatment\", values=c(16, 5, 6)) +\n  facet_wrap(~ season)"},{"path":"data-curation-and-analysis.html","id":"bootstrapping-method","chapter":"5 Data curation and analysis","heading":"5.4 Bootstrapping method","text":"vignette explains use traitstrap package (Telford et al).\ndetails methods see Maitner et al.First , relax turn music. prepared traitstrap playlist !","code":""},{"path":"data-curation-and-analysis.html","id":"the-aim-of-traitstrap","chapter":"5 Data curation and analysis","heading":"5.4.1 The aim of traitstrap","text":"Trait distributions can used infer importance community assembly processes role climate drivers shaping species community responses climate change.\nCommunity ecology typically focused mean, however higher moments (variance, skewness, kurtosis) trait distributions can reveal information various processes shaping species diversity.Measuring trait distributions often difficult time-consuming requires information measuring trait values individuals present.\nSampling protocols often limit sampling non-representative subset community, rely upon species-level average traits values calculated locations across many locations.Traditionally moments trait distributions estimated using weighting approaches rely average traits species weighted measure abundance within community.\ncommunity-weighted trait moments methods assume species’ trait expression can adequately represented mean, ignoring intraspecific trait variation.accurately estimate local trait distributions, trait sampling thus occur across multiple individuals within species, across multiple locations experimental treatments across extent study order capture inter- intra-specific variability.Traitstrap R package estimate moments community trait distributions using bootstrapping approach.\n, package uses hierarchical sampling design, allows accounting incomplete trait collections, traits different spatial temporal levels (e.g. local traits vs. databases), taxonomic hierarchies (e.g., species vs genus) experimental designs (e.g., multiple sites, treated vs. control sampling units).package three main functions:trait imputation function allows account intraspecific trait variation hierarchical sampling design.resample method using bootstrapping (parametric nonparametric method) calculate community weighted mean happy moments (variance, skewness kurtosis).summary function summarizes trait moments calculates confidence intervals.Note tutorial calling mean higher moments happy moments :-)","code":""},{"path":"data-curation-and-analysis.html","id":"the-data","chapter":"5 Data curation and analysis","heading":"5.4.2 The data","text":"vignette use part vascular plant dataset two sites near Longyearbyen Svalbard.\ndata collected Plant Functional Trait Course 2018 contains data plant community composition functional traits.\ndetails see GitHub repoNote species names adapted.","code":""},{"path":"data-curation-and-analysis.html","id":"organize-your-data","chapter":"5 Data curation and analysis","heading":"5.4.3 Organize your data","text":"run traitstrap two datasets required:one dataset information abundance (e.g. biomass, size, cover, etc.) community, used weight species traits abundance community.one dataset traits species (many species individuals data ) community.datasets need organized tidy long format certain columns (see ) required, naming columns user.Let us look datasets example.community data information abundance species community.\ndataset used weigh traits species abundance.\nNote abundance can also cover, size, biomass, something similar.example contains species names (e.g. Taxon), cover species per plot (e.g. Cover) two columns information hierarchy (.e. Site PlotID).trait data contain information traits trait values many species individuals community data possible.\ndata organized way community data corresponding columns.\nexample trait data contains Taxon, Site PlotID well Trait Value.","code":"#> # A tibble: 110 × 4\n#>    Taxon             Cover Site  PlotID\n#>    <chr>             <dbl> <chr> <chr> \n#>  1 alopecurus ovatus   0.5 1     B     \n#>  2 alopecurus ovatus   1   1     C     \n#>  3 alopecurus ovatus   1   1     D     \n#>  4 alopecurus ovatus   2   1     F     \n#>  5 alopecurus ovatus   0.1 1     G     \n#>  6 bistorta vigdis    10   1     A     \n#>  7 bistorta vigdis    25   1     B     \n#>  8 bistorta vigdis    10   1     C     \n#>  9 bistorta vigdis     2   1     D     \n#> 10 bistorta vigdis     1   1     F     \n#> # … with 100 more rows#> # A tibble: 749 × 5\n#>    Taxon                   Site  PlotID Trait         Value\n#>    <chr>                   <chr> <chr>  <chr>         <dbl>\n#>  1 saxifraga oppositifolia 1     A      Wet_Mass_g 0.000695\n#>  2 bistorta vigdis         1     C      Wet_Mass_g 0.0105  \n#>  3 festuca rubra           2     C      Wet_Mass_g 0.00724 \n#>  4 bistorta vigdis         1     C      Wet_Mass_g 0.0189  \n#>  5 equisetum arvense       1     E      Wet_Mass_g 0.270   \n#>  6 bistorta vigdis         1     B      Wet_Mass_g 0.0231  \n#>  7 luzula confusa          1     F      Wet_Mass_g 0.0135  \n#>  8 alopecurus ovatus       1     G      Wet_Mass_g 0.0234  \n#>  9 alopecurus ovatus       1     G      Wet_Mass_g 0.0300  \n#> 10 alopecurus ovatus       1     C      Wet_Mass_g 0.0267  \n#> # … with 739 more rows"},{"path":"data-curation-and-analysis.html","id":"trait-imputation","chapter":"5 Data curation and analysis","heading":"5.4.4 Trait imputation","text":"trait_impute function uses hierarchical sampling design, allows account incomplete trait collections, traits different spatial temporal levels (.e. local traits vs. databases), different taxonomic resolution /experimental design.first two mandatory arguments function two datasets:\ncomm traitsThe next four arguments also mandatory refer specific columns trait community dataset:abundance abundance species community dataset. can abundance, cover, biomass, size, etc.taxon_col column community trait data define species.trait_col column trait data defines traits.value_col column trait data defines trait values.arguments mandatory.scale_hierarchy can define levels traits collected order trait imputation starting highest level (e.g. global database, regional, site, plot).\nexample levels Site PlotID, starting highest level.trait_impute function choose available trait value lowest level, .e. species X plot site 1.\ntrait value available level (plot , site 1), groups level choose trait value species X plot B C site 1.\ntrait available, move hierarchy next level choose trait values species X sites (site 2, 3, etc.).argument min_n_in_samples allows users define minimum number samples chosen level.\nminimum number reached (.e. 3 trait values specific level), trait values next higher level imputed, avoid sampling individual several times, result unrealistic variances.\ndefault minimum number samples 5.other_col argument grouping variables community dataset can defined kept trait imputation.Traitstrap also allows include taxonomy experimental design trait imputation step.argument taxon_col taxonomic hierarchy sampling can defined.\nmeans traits specific species available, trait values genus imputed.\nlist taxonomic hierarchy defined (e.g. “Taxon”, “Genus”).\nNote traits species genus can different traits might meaningful impute traits.\nTherefore, always check trait distributions genus using taxonomic trait imputation.argument treatment_col allows incorporate experimental design traits imputed experimental treatment first factor level, assumed control.\nTherefore, important order levels treatment right order, .e. first level control.\nimputation step can defined certain level using treatment_level argument.\nDepending experimental design might make sense impute traits certain level, e.g. block site.example include taxonomy experimental design trait imputation function (code run).","code":"\ntrait_imputation <- trait_impute(\n    # input data (mandatory)\n    comm = community,\n    traits = trait,\n    \n    # specifies columns in your data (mandatory)\n    abundance_col = \"Cover\",\n    taxon_col = \"Taxon\",\n    trait_col = \"Trait\",\n    value_col = \"Value\",\n    \n    # specifies sampling hierarchy\n    scale_hierarchy = c(\"Site\", \"PlotID\"),\n    \n    # min number of samples\n    min_n_in_sample = 9\n  )\ntrait_imputation\n#> # A tibble: 4,007 × 12\n#> # Groups:   global, Site, PlotID, Trait [28]\n#>    Taxon  Cover Site  PlotID global sum_abun Trait   Value n_sample weight level\n#>    <chr>  <dbl> <chr> <chr>  <chr>     <dbl> <chr>   <dbl>    <int>  <dbl> <ord>\n#>  1 festu…     1 1     A      global     38.2 Wet_… 0.00724       11 0.0909 glob…\n#>  2 festu…     1 1     A      global     38.2 Wet_… 0.0160        11 0.0909 glob…\n#>  3 festu…     1 1     A      global     38.2 Wet_… 0.00529       11 0.0909 glob…\n#>  4 festu…     1 1     A      global     38.2 Wet_… 0.0154        11 0.0909 glob…\n#>  5 festu…     1 1     A      global     38.2 Wet_… 0.0066        11 0.0909 glob…\n#>  6 festu…     1 1     A      global     38.2 Wet_… 0.00637       11 0.0909 glob…\n#>  7 festu…     1 1     A      global     38.2 Wet_… 0.00491       11 0.0909 glob…\n#>  8 festu…     1 1     A      global     38.2 Wet_… 0.0132        11 0.0909 glob…\n#>  9 festu…     1 1     A      global     38.2 Wet_… 0.0233        11 0.0909 glob…\n#> 10 festu…     1 1     A      global     38.2 Wet_… 0.0115        11 0.0909 glob…\n#> # … with 3,997 more rows, and 1 more variable: max_n_in_sample <int>trait_imputation2 <- trait_impute(\n    comm = community,\n    traits = trait,\n    \n    abundance_col = \"Cover\",\n    \n    # defining taxonomic hierarchy\n    taxon_col = c(\"Taxon\", \"Genus\"),\n    \n    trait_col = \"Trait\",\n    value_col = \"Value\",\n    \n    scale_hierarchy = c(\"Site\", \"PlotID\"),\n    min_n_in_sample = 3\n    \n    # specifying experimental design\n    treatment_col = \"Treatment\",\n    treatment_level = \"Site\",\n  )"},{"path":"data-curation-and-analysis.html","id":"nonparametric-bootstrapping","chapter":"5 Data curation and analysis","heading":"5.4.5 Nonparametric bootstrapping","text":"output trait imputation function used nonparametric bootstrapping using trait_np_bootstrap function.Nonparametric bootstrapping resampling method estimate trait moments.\ntraits re-sampled proportion weight community (e.g. abundance species).trait values across individuals community resampled n times (sample_size; default 200) incorporate full spectrum trait variation, generating n number (nrep; default 100) trait distributions.trait distributions happy moments estimated: mean, variance, skewness kurtosis.function also allows extract raw distributions setting argument raw = TRUE.\nraw data can useful visualizing trait distributions.\nraw data extracted, nrep forced 1 avoid memory issues.One advantage using bootstrapping approach, get much mean trait value.\ncan also estimate variance moments trait distributions.\ntraitstrap happy moments can summarized confidence intervals calculated using trait_summarise_boot_moments function.\ninput variable function output nonparametric bootstrapping function (parametric bootstrapping function, see ).confidence interval can calculated parametrically, using mean standard deviation, nonparametrically using quantiles.\ndefault using mean standard deviation (parametric = TRUE) one standard deviation around trait moment (sd_mult = 1).\nnonparametric approach default 0.95 confidence level.","code":"\n# run nonparametric bootstrapping\nnp_bootstrapped_moments <- trait_np_bootstrap(\n  trait_imputation, \n  nrep = 200\n  )\nnp_bootstrapped_moments\n#> # A tibble: 5,600 × 9\n#> # Groups:   global, Site, PlotID [14]\n#>    n     global Site  PlotID Trait             mean   variance skewness kurtosis\n#>    <chr> <chr>  <chr> <chr>  <chr>            <dbl>      <dbl>    <dbl>    <dbl>\n#>  1 1     global 1     A      Plant_Height_cm 1.62    1.94         2.64     8.79 \n#>  2 1     global 1     A      Wet_Mass_g      0.0126  0.0000684    1.22     2.42 \n#>  3 1     global 1     B      Plant_Height_cm 1.67    2.48         2.50     7.04 \n#>  4 1     global 1     B      Wet_Mass_g      0.0134  0.0000688    1.11     1.55 \n#>  5 1     global 1     C      Plant_Height_cm 1.69    1.40         2.62     8.84 \n#>  6 1     global 1     C      Wet_Mass_g      0.0151  0.000183     5.82    50.0  \n#>  7 1     global 1     D      Plant_Height_cm 1.75    4.30         2.52     6.04 \n#>  8 1     global 1     D      Wet_Mass_g      0.0112  0.0000392    2.94    20.6  \n#>  9 1     global 1     E      Plant_Height_cm 7.20   18.0          0.153   -0.703\n#> 10 1     global 1     E      Wet_Mass_g      0.0170  0.000317     2.55     5.47 \n#> # … with 5,590 more rows\n# summarizes bootstrapping output\nsum_boot_moment <- trait_summarise_boot_moments(\n  np_bootstrapped_moments\n  )\nsum_boot_moment\n#> # A tibble: 28 × 17\n#> # Groups:   global, Site, PlotID [14]\n#>    global Site  PlotID Trait           n   mean ci_low_mean ci_high_mean     var\n#>    <chr>  <chr> <chr>  <chr>       <int>  <dbl>       <dbl>        <dbl>   <dbl>\n#>  1 global 1     A      Plant_Heig…   200 1.72        1.60         1.83   2.60e+0\n#>  2 global 1     A      Wet_Mass_g    200 0.0120      0.0114       0.0126 6.49e-5\n#>  3 global 1     B      Plant_Heig…   200 1.74        1.63         1.85   2.57e+0\n#>  4 global 1     B      Wet_Mass_g    200 0.0137      0.0131       0.0142 6.96e-5\n#>  5 global 1     C      Plant_Heig…   200 1.72        1.63         1.82   1.88e+0\n#>  6 global 1     C      Wet_Mass_g    200 0.0149      0.0142       0.0157 1.27e-4\n#>  7 global 1     D      Plant_Heig…   200 1.85        1.72         1.98   4.51e+0\n#>  8 global 1     D      Wet_Mass_g    200 0.0118      0.0113       0.0123 4.87e-5\n#>  9 global 1     E      Plant_Heig…   200 7.06        6.79         7.33   1.71e+1\n#> 10 global 1     E      Wet_Mass_g    200 0.0161      0.0150       0.0172 2.75e-4\n#> # … with 18 more rows, and 8 more variables: ci_low_var <dbl>,\n#> #   ci_high_var <dbl>, skew <dbl>, ci_low_skew <dbl>, ci_high_skew <dbl>,\n#> #   kurt <dbl>, ci_low_kurt <dbl>, ci_high_kurt <dbl>"},{"path":"data-curation-and-analysis.html","id":"parametric-bootstrapping","chapter":"5 Data curation and analysis","heading":"5.4.6 Parametric bootstrapping","text":"Traitstrap also offers option run parametric bootstrapping.trait_fit_distributions function fits parametric distributions species--trait combination finest scale user-supplied hierarchy.\nfunction takes input:object class imputed traits (produced function trait_impute), andthe type distribution fitted.Either single distribution type can used traits, traits can assigned specific distributions types supplying function named list traits (e.g. list(height = \"normal\", mass = \"lognormal\")).Currently function supports normal, log-normal, beta (values 0 1) distributions.function returns dataframe containing fitted distribution parameters.trait_parametric_bootstrap function parametric analogue trait_np_bootstrap function.\ntakes fitted trait distributions produced trait_fit_distributions randomly samples among fitted distributions proportionally species abundances community.trait_np_bootstrap, number samples per replicated draw specified parameter sample_size, number replicated draws specified parameter nrep.\nargument raw allows extract raw distributions (see ).output trait_parametric_bootstrap can summarized using trait_summarize_boot_moments (see ).","code":"\n# fit distributions\nfitted_distributions <- trait_fit_distributions(\n  imputed_traits = trait_imputation,\n  distribution_type = \"lognormal\"\n  )\n#> Warning in .data[[\"Trait\"]] == names(distribution_type)[distribution_type == :\n#> longer object length is not a multiple of shorter object length\nfitted_distributions\n#> # A tibble: 202 × 15\n#> # Groups:   global, Site, PlotID, Trait, Taxon, Cover, n_sample [202]\n#>    global Site  PlotID Trait  Taxon Cover n_sample distribution_ty…  parm1 parm2\n#>    <chr>  <chr> <chr>  <chr>  <chr> <dbl>    <int> <chr>             <dbl> <dbl>\n#>  1 global 1     A      Plant… bist…  10         28 lognormal         0.328 0.517\n#>  2 global 1     A      Plant… drya…   0.1        9 lognormal         1.04  0.704\n#>  3 global 1     A      Plant… fest…   1         11 lognormal         1.61  0.377\n#>  4 global 1     A      Plant… luzu…   0.5       15 lognormal         1.50  0.325\n#>  5 global 1     A      Plant… luzu…   1         20 lognormal         0.588 0.459\n#>  6 global 1     A      Plant… sali…  20         44 lognormal        -0.138 0.931\n#>  7 global 1     A      Plant… saxi…   2          6 lognormal         1.13  0.469\n#>  8 global 1     A      Plant… saxi…   2          2 lognormal         0.693 0    \n#>  9 global 1     A      Plant… sile…   1          3 lognormal        -0.221 0.277\n#> 10 global 1     A      Wet_M… bist…  10         29 lognormal        -4.06  0.454\n#> # … with 192 more rows, and 5 more variables: sd1 <lgl>, sd2 <lgl>, ks <dbl>,\n#> #   cvm <dbl>, ad <dbl>\n# fit several types of distributions\nfitted_distributions <- trait_fit_distributions(\n  imputed_traits = trait_imputation,\n  distribution_type = list(Plant_Height_cm = \"normal\", Wet_Mass_g = \"lognormal\")\n  )\nfitted_distributions\n# run parametric bootstrapping\np_bootstrapped_moments <- trait_parametric_bootstrap(\n    fitted_distributions = fitted_distributions, \n    nrep = 200\n    )\np_bootstrapped_moments\n#> # A tibble: 5,600 × 9\n#> # Groups:   global, Site, PlotID, Trait [28]\n#>    n     global Site  PlotID Trait             mean   variance skewness kurtosis\n#>    <chr> <chr>  <chr> <chr>  <chr>            <dbl>      <dbl>    <dbl>    <dbl>\n#>  1 1     global 1     A      Plant_Height_cm 1.77    2.36         1.65     2.49 \n#>  2 1     global 1     A      Wet_Mass_g      0.0124  0.0000659    1.68     3.61 \n#>  3 1     global 1     B      Plant_Height_cm 1.80    2.26         1.33     1.21 \n#>  4 1     global 1     B      Wet_Mass_g      0.0141  0.0000655    1.81     5.62 \n#>  5 1     global 1     C      Plant_Height_cm 1.81    1.92         2.09     4.04 \n#>  6 1     global 1     C      Wet_Mass_g      0.0140  0.000114     4.93    39.6  \n#>  7 1     global 1     D      Plant_Height_cm 1.91    6.34         3.23    13.2  \n#>  8 1     global 1     D      Wet_Mass_g      0.0119  0.0000569    3.71    25.7  \n#>  9 1     global 1     E      Plant_Height_cm 7.01   15.2          0.177   -0.128\n#> 10 1     global 1     E      Wet_Mass_g      0.0176  0.000223     1.97     4.03 \n#> # … with 5,590 more rows"},{"path":"data-curation-and-analysis.html","id":"extracting-raw-distributions","chapter":"5 Data curation and analysis","heading":"5.4.7 Extracting raw distributions","text":"traitstrap parametric nonparametric bootstrapping functions allow returning raw trait distributions.raw data can useful visualizing trait distributions.Use colour facets separate different traits, hierarchies treatments.","code":"\n# run nonparametric bootstrapping\nraw_dist_np <- trait_np_bootstrap(\n  trait_imputation,\n  raw = TRUE\n  )\nraw_dist_np\n#> # A tibble: 5,600 × 13\n#> # Groups:   global, Site, PlotID, Trait [28]\n#>    n     Taxon    Cover Site  PlotID global sum_abun Trait Value n_sample weight\n#>    <chr> <chr>    <dbl> <chr> <chr>  <chr>     <dbl> <chr> <dbl>    <int>  <dbl>\n#>  1 1     salix p…    20 1     A      global     38.2 Plan…   2         44  0.455\n#>  2 1     salix p…    20 1     A      global     38.2 Plan…   0.8       44  0.455\n#>  3 1     bistort…    10 1     A      global     38.2 Plan…   1.1       28  0.357\n#>  4 1     salix p…    20 1     A      global     38.2 Plan…   1.5       44  0.455\n#>  5 1     salix p…    20 1     A      global     38.2 Plan…   1.1       44  0.455\n#>  6 1     bistort…    10 1     A      global     38.2 Plan…   0.8       28  0.357\n#>  7 1     salix p…    20 1     A      global     38.2 Plan…   1.1       44  0.455\n#>  8 1     salix p…    20 1     A      global     38.2 Plan…   1         44  0.455\n#>  9 1     salix p…    20 1     A      global     38.2 Plan…   1.6       44  0.455\n#> 10 1     luzula …     1 1     A      global     38.2 Plan…   1.5       20  0.05 \n#> # … with 5,590 more rows, and 2 more variables: level <ord>,\n#> #   max_n_in_sample <int>\nggplot(raw_dist_np, aes(x = log(Value), fill = Site)) +\n  geom_density(alpha = 0.4) +\n  scale_fill_viridis_d(end = 0.9, option = \"plasma\") +\n  labs(x = \"log(trait value)\") +\n  facet_wrap( ~ Trait, scales = \"free\")"},{"path":"data-curation-and-analysis.html","id":"check-your-data","chapter":"5 Data curation and analysis","heading":"5.4.8 Check your data","text":"Traitstrap couple functions check data.coverage_plot function shows trait coverage community level.\nBasically, function summarizes level traits imputed, much coverage community reached.Based simulations, recommend collect traits least 80% community cover (Maitner et al. prep).Another important information know taxa traits missing.\ncan useful data sampling finished want know species sampled.\nfunction also tells maximal abundance missing species, gives useful information missing species abundant rare.Traitstrap function trait_missing gives table missing values.","code":"\n# show coverage plot\nautoplot(trait_imputation) + \n  theme(axis.text.x = element_text(size = 8, angle = 90, vjust = 0.5))\n# list missing traits\ntrait_missing(imputed_trait = trait_imputation,\n              comm = community)\n#> # A tibble: 20 × 3\n#> # Groups:   Taxon [20]\n#>    Taxon                      max_abun n_traits\n#>    <chr>                         <dbl>    <int>\n#>  1 alopecurus ovatus               2          2\n#>  2 bistorta vigdis                25          2\n#>  3 calamagrostis neglecta         60          2\n#>  4 cassiope tetragona              5          2\n#>  5 dryas octopetala               20          2\n#>  6 enquistetum scirpoides          2          2\n#>  7 festuca rubra                   1          2\n#>  8 juncus biglumis                 0.5        1\n#>  9 luzula confusa                  5          2\n#> 10 luzula nivalis                  5          2\n#> 11 maitneranthes hieracifolia      0.5        1\n#> 12 oxyria tanyna                   2          2\n#> 13 poa pratensis                   1          2\n#> 14 salix polaris                  43          2\n#> 15 saxifraga hirculus              2          2\n#> 16 saxifraga oppositifolia         2          2\n#> 17 silene acaudis                  1          2\n#> 18 stelfordaria humifusa           0.5        1\n#> 19 stellaria longipes              0.1        1\n#> 20 trisetum spicatum               3          2"}]
